# CLAUDE.md Template Guide

This template is used by Claude Hooks Manager when generating CLAUDE.md files. You can customize it to fit your project's specific needs.

## Template Structure

The CLAUDE.md file generated by `claude-hooks dart init` includes these sections:

### 1. Project Overview
- Brief description of your project
- Automatically populated from user input

### 2. Dart Integration (if enabled)
- Workspace configuration
- Task and documentation folders
- Sync rules and settings

### 3. Task Management Rules
- Dart MCP tool usage guidelines
- Status values (To-do, Doing, Done)
- Priority levels (Critical, High, Medium, Low)
- Workflow rules for task updates

### 4. Git Workflow
- Commit message guidelines
- Restrictions (no co-authored commits, no Claude signatures)
- Conventional commit format

### 5. Documentation Rules
- Markdown file synchronization with Dart
- Folder structure guidelines
- Documentation best practices

### 6. Development Guidelines
- Detail-oriented implementation requirements
- Form and data flow validation
- Testing requirements
- Complete functionality implementation

### 7. Testing Commands
- Test, lint, and type check commands
- Automatically populated from user input

### 8. Project-Specific Context
- Technology stack
- How to run the application
- Custom instructions

## Customizing Your CLAUDE.md

### Method 1: During Setup
When running `claude-hooks dart init`, you'll be prompted for:
- Project description
- Primary language
- Test/lint/typecheck commands
- Technology stack
- Additional instructions (opens editor)

### Method 2: Manual Editing
After generation, edit CLAUDE.md directly to add:

```markdown
## Custom Section Example

### API Guidelines
- Always use RESTful conventions
- Include proper error handling
- Document all endpoints

### Database Rules
- Use migrations for schema changes
- Never modify production data directly
- Always backup before major operations

### Security Requirements
- Sanitize all user inputs
- Use environment variables for secrets
- Follow OWASP guidelines
```

### Method 3: Template Variables

The template uses these variables you can reference:
- `${projectName}` - Your project directory name
- `${projectInfo.description}` - Project description
- `${dartConfig.workspace}` - Dart workspace name
- `${dartConfig.tasksFolder}` - Tasks dartboard path
- `${dartConfig.docsFolder}` - Documentation folder path
- `${projectInfo.testCommand}` - Test command
- `${projectInfo.lintCommand}` - Lint command
- `${projectInfo.typecheckCommand}` - Type check command
- `${projectInfo.runCommand}` - Run command
- `${projectInfo.techStack}` - Technology stack
- `${projectInfo.additionalInstructions}` - Custom instructions

## Common Customizations

### 1. Add Phase-Based Development
```markdown
## Development Phases
- Phase 1: Core Infrastructure âœ“
- Phase 2: User Authentication (IN PROGRESS)
- Phase 3: API Development
- Phase 4: Frontend Implementation
- Phase 5: Testing & Documentation
```

### 2. Add Team-Specific Rules
```markdown
## Team Guidelines
- Code reviews required for all PRs
- Daily standup updates in Dart
- Weekly architecture reviews
- Documentation updates with each feature
```

### 3. Add Environment-Specific Instructions
```markdown
## Environment Setup
### Development
- Database: PostgreSQL 14
- Redis: 7.0
- Node.js: 18.x

### Staging
- Mirror production configuration
- Use staging API keys

### Production
- Follow deployment checklist
- Coordinate with DevOps team
```

### 4. Add Performance Guidelines
```markdown
## Performance Requirements
- API response time < 200ms
- Page load time < 3s
- Database queries < 100ms
- Memory usage < 512MB
```

## Re-generating CLAUDE.md

To regenerate your CLAUDE.md with updated information:

1. **Backup existing file**: `cp CLAUDE.md CLAUDE.md.bak`
2. **Run**: `claude-hooks dart init`
3. **Choose**: Overwrite when prompted
4. **Merge**: Copy custom sections from backup

## Best Practices

1. **Keep it concise**: Claude reads this every session
2. **Be specific**: Include exact commands and paths
3. **Update regularly**: Keep in sync with project changes
4. **Version control**: Track changes in git
5. **Team alignment**: Ensure all team members use same instructions

## Example: Complete Custom CLAUDE.md

```markdown
# MyProject Instructions for Claude

## Project Overview
E-commerce platform with AI-powered recommendations

## Dart Integration
[... generated dart config ...]

## Custom Business Rules
### Order Processing
- Validate inventory before confirming orders
- Send email notifications at each step
- Update analytics dashboard in real-time

### Payment Handling
- Use Stripe for all transactions
- Store only tokenized payment data
- Implement 3D Secure for EU customers

### AI Features
- Recommendation engine uses TensorFlow
- Retrain models weekly
- A/B test all algorithm changes

## Development Workflow
### Branch Strategy
- main: Production-ready code
- develop: Integration branch
- feature/*: New features
- hotfix/*: Emergency fixes

### PR Requirements
1. All tests must pass
2. Code coverage > 80%
3. Performance benchmarks met
4. Documentation updated

[... rest of generated content ...]
```

## Getting Help

- Run `claude-hooks dart edit` to modify .dart configuration
- Edit CLAUDE.md directly for project-specific rules
- Use `claude-hooks dart init` to regenerate with new settings
- Keep both .dart and CLAUDE.md in sync for best results